// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Configuración para evitar warnings en producción
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Configuración para connection pooling en Vercel
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  username  String?  @unique
  password  String
  role      UserRole @default(STUDENT)
  phone     String?
  isActive  Boolean  @default(true)
  
  // Campos de pago
  paymentStatus      PaymentStatus? @default(PENDING)
  paymentDate        DateTime?
  paymentNotes       String?
  credentialsGenerated Boolean      @default(false)
  
  // Timestamps
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  // Relaciones
  enrollments Enrollment[]
  
  // Índices para optimización
  @@index([email])
  @@index([role])
  @@index([paymentStatus])
  @@index([isActive])
  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Float
  duration    Int      // en semanas
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  enrollments Enrollment[]
  modules     Module[]
  
  // Índices
  @@index([isActive])
  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  isActive    Boolean  @default(true)
  
  // Relaciones
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Índices
  @@index([courseId])
  @@index([order])
  @@index([isActive])
  @@map("modules")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?
  videoUrl    String?
  duration    Int      // en minutos
  order       Int
  isActive    Boolean  @default(true)
  
  // Relaciones
  moduleId String
  module   Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Índices
  @@index([moduleId])
  @@index([order])
  @@index([isActive])
  @@map("lessons")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(ACTIVE)
  progress  Float    @default(0) // porcentaje de progreso
  
  // Relaciones
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Timestamps
  enrolledAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Índices
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@map("enrollments")
}

model Cohort {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  maxStudents Int?
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Índices
  @@index([startDate])
  @@index([endDate])
  @@index([isActive])
  @@map("cohorts")
}

// Enums
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  SUPER_ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}
